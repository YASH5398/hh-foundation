rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 👤 USERS collection - for Upcoming Payments
    match /users/{userId} {
      // ✅ Allow public read access (Upcoming Payments, Leaderboard, etc.)
      allow get, list, read: if true;

      // ✅ Allow unauthenticated signup
      allow create: if
        (
          // If paymentMethod.bank is set, require all fields non-empty
          !('paymentMethod' in request.resource.data) ||
          !('bank' in request.resource.data.paymentMethod) ||
          (
            request.resource.data.paymentMethod.bank.accountNumber is string &&
            request.resource.data.paymentMethod.bank.accountNumber.size() > 0 &&
            request.resource.data.paymentMethod.bank.bankName is string &&
            request.resource.data.paymentMethod.bank.bankName.size() > 0 &&
            request.resource.data.paymentMethod.bank.ifscCode is string &&
            request.resource.data.paymentMethod.bank.ifscCode.size() > 0
          )
        ) &&
        (
          // If paymentMethod.upi.upi is set, require non-empty
          !('paymentMethod' in request.resource.data) ||
          !('upi' in request.resource.data.paymentMethod) ||
          !('upi' in request.resource.data.paymentMethod.upi) ||
          (
            request.resource.data.paymentMethod.upi.upi is string &&
            request.resource.data.paymentMethod.upi.upi.size() > 0
          )
        ) && true;

      // ✅ Allow only the user to update their own profile
      allow update: if request.auth != null && request.auth.uid == userId &&
        (
          // If paymentMethod.bank is set, require all fields non-empty
          !('paymentMethod' in request.resource.data) ||
          !('bank' in request.resource.data.paymentMethod) ||
          (
            request.resource.data.paymentMethod.bank.accountNumber is string &&
            request.resource.data.paymentMethod.bank.accountNumber.size() > 0 &&
            request.resource.data.paymentMethod.bank.bankName is string &&
            request.resource.data.paymentMethod.bank.bankName.size() > 0 &&
            request.resource.data.paymentMethod.bank.ifscCode is string &&
            request.resource.data.paymentMethod.bank.ifscCode.size() > 0
          )
        ) &&
        (
          // If paymentMethod.upi.upi is set, require non-empty
          !('paymentMethod' in request.resource.data) ||
          !('upi' in request.resource.data.paymentMethod) ||
          !('upi' in request.resource.data.paymentMethod.upi) ||
          (
            request.resource.data.paymentMethod.upi.upi is string &&
            request.resource.data.paymentMethod.upi.upi.size() > 0
          )
        );
    }

    // ✅ Allow read access for other public data (optional fallback if needed)
    match /{document=**} {
      allow read: if true;  // 🔒 Only read (NOT write)
    }

    // 🔐 Everything else only admin can access
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }

    // 🧾 E-PINS
    match /epins/{epinId} {
      // Allow read/query by anyone (for validation before signup)
      allow get, list, read: if true;

      // Allow update only if user is marking their own UID as usedBy
      allow update: if request.auth != null &&
        request.resource.data.usedBy == request.auth.uid;

      // Admin can create/delete
      allow create, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // 🔗 REFERRALS
    match /referrals/{refId} {
      // Public read for leaderboard or checks
      allow get, list, read: if true;

      // Allow unauthenticated create/update (during signup)
      allow create, update: if true;
    }

  // 💸 SEND HELP
match /sendHelp/{docId} {
  allow create: if request.auth != null;
  allow read, update: if request.auth != null &&
    (request.auth.uid == resource.data.senderUid || request.auth.uid == resource.data.receiverUid);
  allow delete: if request.auth.token.admin == true;
  
  // 🔔 REMINDERS subcollection
  match /reminders/{reminderId} {
    allow create: if request.auth != null;
    allow read: if request.auth != null &&
      (request.auth.uid == resource.data.senderUid || request.auth.uid == resource.data.receiverUid);
  }
}

    
   // 💰 RECEIVE HELP
match /receiveHelp/{docId} {
  allow create: if request.auth != null;
  allow read, update: if request.auth != null;
}


    // 🔔 NOTIFICATIONS
    match /notifications/{docId} {
      // Users can read only their own notifications
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.recipientId;
      
      // Admin can read/write all notifications
      allow read, write: if request.auth != null && request.auth.token.admin == true;
      
      // Allow creating notifications by system/admin (no auth required for server-side)
      allow create: if true;
    }

    // 📱 FCM TOKENS
    match /fcmTokens/{docId} {
      // Users can create/update only their own token (docId == request.auth.uid)
      allow create, update: if request.auth != null && 
        request.auth.uid == docId;
      
      // Admin can manage all
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }

    // 📜 HELP HISTORY
    match /helpHistory/{docId} {
      allow create, update: if request.auth != null &&
        (request.auth.uid == request.resource.data.senderId || request.auth.uid == request.resource.data.receiverId);
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
    }

    // 🔄 E-PIN TRANSFERS
    match /epinTransfers/{docId} {
      allow create: if request.auth != null && request.resource.data.from == request.auth.uid;
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
    }

    // 📥 E-PIN REQUESTS
    match /epinRequests/{docId} {
      // Allow any authenticated user to create E-PIN requests
      allow create: if request.auth != null;
      
      // Allow users to read their own requests
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.uid || request.auth.token.admin == true);
      
      // Only admins can update/delete requests
      // Allow updating status, approvedBy, approvedAt, rejectedBy, rejectedAt, and other admin fields
      allow update: if request.auth != null && request.auth.token.admin == true &&
        (
          // Allow status updates
          request.resource.data.status in ['pending', 'approved', 'rejected', 'accepted'] &&
          // Allow admin metadata fields (both string and object formats)
          (request.resource.data.approvedBy == request.auth.uid || 
           request.resource.data.rejectedBy == request.auth.uid ||
           (request.resource.data.approvedBy is map && request.resource.data.approvedBy.uid == request.auth.uid) ||
           (request.resource.data.rejectedBy is map && request.resource.data.rejectedBy.uid == request.auth.uid) ||
           !('approvedBy' in request.resource.data) ||
           !('rejectedBy' in request.resource.data)) &&
          // Ensure required fields are present
          request.resource.data.uid == resource.data.uid &&
          request.resource.data.requestedCount == resource.data.requestedCount
        );
      
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }



    // 🏆 LEADERBOARD
    match /leaderboard/{docId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // 💬 HELP CHATS
    match /helpChats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.senderUid ||
        request.auth.uid == resource.data.receiverUid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      );
    }

    // 💬 CHATS (for chat system)
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null;
    }

    match /tasks/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // 🤖 CHATBOT CHATS
    match /chatbotChats/{userId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId || request.auth.token.admin == true);
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && 
          (request.auth.uid == userId || request.auth.token.admin == true);
      }
    }

    // 👨‍💼 AGENT CHAT ROOMS - accessible by participants only
    match /chatRooms/{chatRoomId} {
      // Users can read/write only if they are participants
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow creation if user is in participants array
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        // Users can read messages if they are participants of the chat room
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants;
        
        // Users can create messages if they are participants and the senderUid matches their auth
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants &&
          request.resource.data.senderUid == request.auth.uid;
      }
    }

    // 🎫 TICKETS (for support/agent dashboard)
    match /tickets/{ticketId} {
      // Users can create a ticket with their UID as createdBy
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
      
      // Users can read only their own tickets
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
      
      // Agents can read tickets assigned to them
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.assignedAgentId;
      
      // Admin has full access
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }

    // 🎧 AGENT SUPPORT TICKETS
    match /supportTickets/{ticketId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == resource.data.agentId ||
        request.auth.token.admin == true
      );
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.agentId ||
        request.auth.token.admin == true
      );
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && (
          request.auth.uid == get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId ||
          request.auth.uid == get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.agentId ||
          request.auth.token.admin == true
        );
        allow create: if request.auth != null && (
          request.auth.uid == get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId ||
          request.auth.uid == get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.agentId ||
          request.auth.token.admin == true
        ) && request.resource.data.senderUid == request.auth.uid;
        allow update: if false; // Messages should not be updated
        allow delete: if request.auth != null && request.auth.token.admin == true;
      }
    }

    // 🎯 AGENT DASHBOARD collection - only for users with role="agent"
    match /agentDashboard/{document} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "agent";
    }

    // 🔒 DENY BY DEFAULT - Keep everything else locked
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }
  }
}